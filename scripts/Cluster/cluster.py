import csv
import sys
import matplotlib.pyplot as plt
from time import time
import numpy as np
from sklearn import metrics
from sklearn.cluster import KMeans
from sklearn.preprocessing import scale


# Module 1

all_data = []
all_labels = []
family_name = []

def split(argv):
    
    all = []
    data = []
    with open(argv[0],'rb') as f:
        reader = csv.reader(f)
        
        for row in reader:
            row_data = []
            for i in row[0:]:
                row_data.append(i)
            data.append(row_data)
        next(reader, None)
    

    with open(argv[1],'rb') as f:
        reader = csv.reader(f)
        
        for row in reader:
            row_data = []
            for i in row[0:]:
                row_data.append(i)
            family_name.append(row_data)
        next(reader, None)

#print len(data[0])
#print len(family_name)

    data = data[1:]
    
    
    
    for i in range(len(family_name)):
        data[i].append(family_name[i][1])

    #sort
    data.sort(key=lambda x:x[348])

    #split
    data = np.array(data)
    f1 = data[data[:, 348] == 'Andromeda', :]
    f1 = f1.tolist()
    f1_out = []
    for row in f1:
        row = row[0:348]
        f1_out.append(row)

    all.append(f1_out)
    #print len(f1_out)
    #print len(f1_out[0])

    f2 = data[data[:, 348] == 'Banker', :]
    f2 = f2.tolist()
    f2_out = []
    for row in f2:
        row = row[0:348]
        f2_out.append(row)
    all.append(f2_out)

    f3 = data[data[:, 348] == 'Banload', :]
    f3 = f3.tolist()
    f3_out = []
    for row in f3:
        row = row[0:348]
        f3_out.append(row)
    all.append(f3_out)

    f4 = data[data[:, 348] == 'Cutwail', :]
    f4 = f4.tolist()
    f4_out = []
    for row in f4:
        row =    row[0:348]
        f4_out.append(row)
    all.append(f4_out)

    f5 = data[data[:, 348] == 'Inject', :]
    f5 = f5.tolist()
    f5_out = []
    for row in f5:
        row = row[0:348]
        f5_out.append(row)
    all.append(f5_out)

    f6 = data[data[:, 348] == 'Injector', :]
    f6 = f6.tolist()
    f6_out = []
    for row in f6:
        row = row[0:348]
        f6_out.append(row)
    all.append(f6_out)

    f7 = data[data[:, 348] == 'Ramnit', :]
    f7 = f7.tolist()
    f7_out = []
    for row in f7:
        row = row[0:348]
        f7_out.append(row)
    all.append(f7_out)

    f8 = data[data[:, 348] == 'Shifu', :]
    f8 = f8.tolist()
    f8_out = []
    for row in f8:
        row = row[0:348]
        f8_out.append(row)
    all.append(f8_out)

    f9 = data[data[:, 348] == 'Smsagent', :]
    f9 = f9.tolist()
    f9_out = []
    for row in f9:
        row = row[0:348]
        f9_out.append(row)
    all.append(f9_out)

    f10 = data[data[:, 348] == 'Smsthief', :]
    f10 = f10.tolist()
    f10_out = []
    for row in f10:
        row = row[0:348]
        f10_out.append(row)
    all.append(f10_out)

    f11 = data[data[:, 348] == 'Zbot', :]
    f11 = f11.tolist()
    f11_out = []
    for row in f11:
        row = row[0:348]
        f11_out.append(row)
    all.append(f11_out)

    return all
# Module 2

def cluster(data_with_id):

    data = []
    
    for row in data_with_id:
        row_data = []
        for cell in row[1:]:
            row_data.append(float(cell))
        data.append(row_data)


    np.random.seed(42)
    data_scalized = scale(data)
    result = KMeans(init='k-means++', n_clusters=6, n_init=6)
    result.fit(data_scalized)
    #substr = argv[0][:-4]
    #path1 = substr + '.txt'
    #path2 = substr + '_labels.txt'
    labels = result.labels_
    labels = labels.tolist()
    labels_with_id = []
    for i in range(len(labels)):
        row_label = []
        row_label.append(data_with_id[i][0])
        row_label.append(labels[i])
        labels_with_id.append(row_label)
    
    return labels_with_id

# Module 3
def generate(labels):
    
    for i in range(66):
        i = i + 1
        str1 =""
        str1 = str(i) + "_label.csv"
        prep_labels = []
        for row in labels:
            prep_row = []
            prep_row.append(row[0])
            if row[1] == i:
                prep_row.append(1)
                prep_labels.append(prep_row)
            else:
                prep_row.append(0)
                prep_labels.append(prep_row)
    
        with open('Filtered_Output/'+str1,"w+") as f:
            writer = csv.writer(f)
            writer.writerows(prep_labels)




def main(argv):
    all_data = split(argv)
    for i in range(len(all_data)):
        labels = cluster(all_data[i])
        for row in labels:
            row[1] += (i*6 + 1)
            all_labels.append(row)

    generate(all_labels)
#print reduced_all_data
#print all_labels


#Use Command line arguments as input, the first argument is metrics file and the second is target file

if __name__=='__main__':
    main(sys.argv[1:])
