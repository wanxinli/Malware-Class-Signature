from sklearn.metrics import confusion_matrix
import numpy as np
import matplotlib.pyplot as plt
import csv
import itertools

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
        This function prints and plots the confusion matrix.
        Normalization can be applied by setting `normalize=True`.
        """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)
    

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')


for i in range(11):
    y_real = []
    y_pred = [] 
    with open('real_binary_class/real_binary_class_%d.csv' % (i+1),'rb') as f:
        reader = csv.reader(f)

        for row in reader:
            y_real.append(int(row[1]))

    with open('predict_binary_class/predict_binary_class_%d.csv' % (i+1),'rb') as f:
        reader = csv.reader(f)

        for row in reader:
            y_pred.append(int(row[1]))

    cnf_matrix = confusion_matrix(y_real,y_pred)
    np.set_printoptions(precision=2)

    plt.figure()
    plot_confusion_matrix(cnf_matrix,[0,1],                          title='confusion matrix, without normalization')
    plt.savefig('confusion_matrix/confusion_matrix%i.png' % (i+1))

