from sklearn import tree
import sys
import csv
from time import time
import pickle
from sklearn.externals import joblib

def main(argv):
    #before filtered dataset x
    X = []
    y = []
    #read original metrics file first time, this time dose not include sample's ID and feature names, store the vectors in x
    with open('test_metrics.csv','rb') as f:
        reader = csv.reader(f)
            
        next(reader, None)
        for row in reader:
            row_data = []
            for i in row[1:]:
                row_data.append(i)
            X.append(row_data)

    clf = joblib.load('model.pkl')
    res1 = clf.predict_proba(X)
    res2 = clf.predict(X)
    res_proba = res1.tolist()
    res_labels = res2.tolist()
    #print res_labels
    
    with open('test_target.csv','rb') as f:
        reader = csv.reader(f)
        
        for row in reader:
            for i in row[1:]:
                y.append(i)
        next(reader, None)

    feature_name = []
    data = []

    #read original metrics file again, this time include sample's ID and Feature name
    #store the whole thing in data
    with open('test_metrics.csv','rb') as f:
        reader = csv.reader(f)

        for row in reader:
            row_data = []
            for i in row[0:]:
                row_data.append(i)
            data.append(row_data)
        next(reader, None)

    feature_name = data[0]

    #filter the dataset
    #set thresold 0.8 and 0.2 for the good enough and bad enough samples of testset
    class_names = ['Andromeda','Banker','Banload','Cutwail','Inject','Injector','Ramnit','Shifu','Smsagent','Smsthief','Zbot']
    filtered_metrics = []
    filtered_target = []
    filtered_metrics.append(feature_name)
    #scores
    predict_filtered_target = []
    filtered_proba = []
    for j in range(11):
        for i in range(len(res_proba)):
            if y[i] == class_names[j]:
                if res_proba[i][j] >= 0.8 or res_proba[i][j] <= 0.2:
                    row_metric = []
                    #data[i][0] represents sample's ID
                    row_metric.append(data[i+1][0])
                    row_metric.extend(X[i])
                    
                    row_target = []
                    row_target.append(data[i+1][0])
                    row_target.append(y[i])
                    filtered_metrics.append(row_metric)
                    filtered_target.append(row_target)
                    
                    row_target = []
                    row_target.append(data[i+1][0])
                    row_target.append(res_labels[i])
                    predict_filtered_target.append(row_target)

                    filtered_proba.append(res_proba[i])

    #print len(filtered_metrics)
    #print len(filtered_target)
    #write filtered metrics file
    with open('filtered_metrics.csv','wb') as f:
        writer = csv.writer(f)
        writer.writerows(filtered_metrics)

    #write filtered target file
    with open('filtered_target.csv','wb') as f:
        writer = csv.writer(f)
        writer.writerows(filtered_target)

    #write filtered prediction file
    with open('filtered_prediction.csv','wb') as f:
        writer = csv.writer(f)
        writer.writerows(filtered_proba)


    prep_temp = filtered_metrics[1:]
    print len(prep_temp)
    prep_roc = []
    for i in range(len(prep_temp)):
        row = []
        row.append(prep_temp[i][0])
        row.append(filtered_target[i][1])
        prep_roc.append(row)



    #split into 11 subsets with binary classes
    #print "here"
    for i in range (11):
        i = i+1
        str1 = ""
        str1 = "real_binary_class_" + str(i)+".csv"
        prep_roc1 = []
        for line in prep_roc:
            row = []
            row.append(line[0])
            
            if line[1] == class_names[i-1]:
                row.append(1)
                prep_roc1.append(row)
            else:
                row.append(0)
                prep_roc1.append(row)

        with open(str1,"w+") as f:
            writer = csv.writer(f)
            writer.writerows(prep_roc1)

    #split into 11 subsets with predicted binary classes
    #print "here"
    for i in range (11):
            i = i+1
            str1 = ""
            str1 = "predict_binary_class_" + str(i)+".csv"
            prep_roc1 = []
            for line in predict_filtered_target:
                row = []
                row.append(line[0])
            
                if line[1] == class_names[i-1]:
                    row.append(1)
                    prep_roc1.append(row)
                else:
                    row.append(0)
                    prep_roc1.append(row)

            with open(str1,"w+") as f:
                writer = csv.writer(f)
                writer.writerows(prep_roc1)

if __name__=='__main__':
    main(sys.argv[1:])
