from sklearn import tree
import sys
import csv
from time import time
import pickle
from sklearn.externals import joblib

def main(argv):
    #before filtered dataset x
    x = []
    y = []
    #read original metrics file first time, this time dose not include sample's ID and feature names, store the vectors in x
    with open('test_metrics.csv','rb') as f:
        reader = csv.reader(f)
            
        next(reader, None)
        for row in reader:
            row_data = []
            for i in row[1:]:
                row_data.append(i)
            x.append(row_data)

    clf = joblib.load('model.pkl')
    res1 = clf.predict_proba(x)
    res2 = clf.predict(x)
    #print len(res)
    #print res
    res_proba = res1.tolist()
    #res_labels = res2.tolist()
    #print res_labels
    
    with open('test_predict1.csv','wb') as f:
        writer = csv.writer(f)
        writer.writerows(res_proba)
    

    real_labels = []
    with open('test_target.csv','rb') as f:
        reader = csv.reader(f)
        
        for row in reader:
            for i in row[1:]:
                real_labels.append(i)
        next(reader, None)


    #score = clf.score(x,real_labels, sample_weight=None)
    #print score
  
  
    feature_name = []
    data = []

    #read original metrics file again, this time include sample's ID and Feature name
    #store the whole thing in data
    with open('test_metrics.csv','rb') as f:
        reader = csv.reader(f)

        for row in reader:
            row_data = []
            for i in row[0:]:
                row_data.append(i)
            data.append(row_data)
        next(reader, None)

    feature_name = data[0]

    #filter the dataset
    #set thresold 0.8 and 0.2 for the good enough and bad enough samples of testset
    
    filtered_metrics = []
    filtered_target = []
    filtered_metrics.append(feature_name)
    for i in range(len(res_proba)):
        if real_labels[i] == 'Andromeda':
            if res_proba[i][0] >= 0.8 or res_proba[i][0] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Banker':
            if res_proba[i][1] >= 0.8 or res_proba[i][1] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Banload':
            if res_proba[i][2] >= 0.8 or res_proba[i][2] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Cutwail':
            if res_proba[i][3] >= 0.8 or res_proba[i][3] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Inject':
            if res_proba[i][4] >= 0.8 or res_proba[i][4] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Injector':
            if res_proba[i][5] >= 0.8 or res_proba[i][5] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Ramnit':
            if res_proba[i][6] >= 0.8 or res_proba[i][6] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Shifu':
            if res_proba[i][7] >= 0.8 or res_proba[i][7] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Smsagent':
            if res_proba[i][8] >= 0.8 or res_proba[i][8] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Smsthief':
            if res_proba[i][9] >= 0.8 or res_proba[i][9] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
        elif real_labels[i] == 'Zbot':
            if res_proba[i][10] >= 0.8 or res_proba[i][10] <= 0.2:
                row_metric = []
                #data[i][0] reprents sample's ID
                row_metric.append(data[i+1][0])
                row_metric.extend(x[i])
                row_target = []
                row_target.append(data[i+1][0])
                row_target.append(real_labels[i])
                filtered_metrics.append(row_metric)
                filtered_target.append(row_target)
    print len(filtered_metrics)
    print len(filtered_target)




    #write filtered metrics file
    with open('filtered_metrics.csv','wb') as f:
        writer = csv.writer(f)
        writer.writerows(filtered_metrics)

    #write filtered target file
    with open('filtered_target.csv','wb') as f:
        writer = csv.writer(f)
        writer.writerows(filtered_target)

if __name__=='__main__':
    main(sys.argv[1:])
